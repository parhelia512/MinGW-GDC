#!/usr/bin/env bash

set -euo pipefail

#-------------------------------------------------------------------------------
#
# GDC build script
# Target: x86_64-linux-gnu
# Host: native
# Author: Sebastien Alaiwan, largely inspired by the one made by venix
# Date: 2016-07-17
#
# The basic steps are:
# 0) Download and extract all the required packages
# 1) build the binutils, ./configure with --target=$(TARGET)
# 2) install the binutils: make install
# 3) build the core-gcc, configure with --target=$(TARGET), make all-gcc
# 4) install the core-gcc: make install-gcc
# 5) build the GNU libc runtime (libc) using the core-gcc
# 6) finish building gcc: go back to the core-gcc build directory and run "make"
# 7) install gcc: make install
#-------------------------------------------------------------------------------
readonly TARGET=x86_64-ace-linux-gnu
readonly PREFIX=/tmp/gdc-release

readonly scriptDir=$(realpath $(dirname $0))
source $scriptDir/base.sh

function main
{
  mkdir -p $ARCHIVES
  mkdir -p src bin

  lazy binutils_download
  lazy binutils_build

  lazy glibc_download
  lazy glibc_install_headers

  lazy gcc_download
  lazy gcc_extract

  lazy gdc_download
  lazy gdc_apply

  lazy gcc_configure
  lazy gcc_standalone_build
  lazy gcc_standalone_install

  lazy glibc_build_2

  lazy gcc_build
  lazy gcc_install

  echo Done
}

#-------------------------------------------------------------------------------
# BINUTILS
#-------------------------------------------------------------------------------
readonly BINUTILS_SRC=src/binutils
readonly BINUTILS_BIN=bin/binutils

function binutils_download
{
  lazy_download "$ARCHIVES/binutils.tar.bz2" "$SERVER_URL/binutils/binutils-$BINUTILS_VERSION.tar.bz2"
}

function binutils_build
{
  extract_to "$ARCHIVES/binutils.tar.bz2" $BINUTILS_SRC

  rm -rf "$BINUTILS_BIN"
  mkdir -p "$BINUTILS_BIN"
  readonly DIR=$(realpath $BINUTILS_SRC)
  pushd "$BINUTILS_BIN"
  $DIR/configure \
    --prefix="$PREFIX" \
    --target=$TARGET \
    --disable-nls --with-gcc --with-gnu-as --with-gnu-ld \
    --disable-shared 2>&1 >/dev/null
  popd

  $MAKE -C "$BINUTILS_BIN" CFLAGS="-O2 -fno-exceptions" LDFLAGS="-s"
  $MAKE -C "$BINUTILS_BIN" install
}

#-------------------------------------------------------------------------------
# GLIBC
#-------------------------------------------------------------------------------

function glibc_download
{
  lazy_download "$ARCHIVES/glibc.tar.xz" "http://ftp.gnu.org/gnu/glibc/glibc-2.22.tar.xz"
}

function glibc_install_headers
{
  extract_to $ARCHIVES/glibc.tar.xz src/glibc
  mkdir -p bin/glibc

  pushd bin/glibc
  ../../src/glibc/configure --prefix=$PREFIX/$TARGET --host=$TARGET --target=$TARGET #--with-headers=$PREFIX/$TARGET/include
  popd

  #$MAKE -C bin/glibc
  $MAKE -C bin/glibc install-headers
}

function glibc_build_2
{
  $MAKE -C bin/glibc
  $MAKE -C bin/glibc install
}

##-------------------------------------------------------------------------------
## GCC CORE
##-------------------------------------------------------------------------------
readonly GCC_SRC=src/gcc
readonly GCC_BIN=bin/gcc

function gcc_download
{
  lazy_download $ARCHIVES/gcc.tar.bz2 "$SERVER_URL/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.bz2" 
}

function gcc_extract
{
  extract_to $ARCHIVES/gcc.tar.bz2 $GCC_SRC

  pushd $GCC_SRC
  ./contrib/download_prerequisites
  popd
}

function gcc_configure
{
  local dir=../../$GCC_SRC # 'dir' must be a relative path, otherwise GMP will not build under Msy2/Cygwin
  mkdir -p "$GCC_BIN"
  pushd $GCC_BIN
  $dir/configure \
    -v \
    --disable-bootstrap \
     --enable-targets=all \
     --prefix="$PREFIX" \
     --target="$TARGET" \
     --enable-languages=$GCC_LANGS \
     --with-gcc --with-gnu-ld --with-gnu-as \
     --enable-threads \
     --disable-nls \
     --disable-win32-registry \
     --disable-shared \
     --disable-multilib \
     --enable-sjlj-exceptions \
     --disable-java-awt \
     --without-x \
     --enable-lto
  popd
}

function gcc_standalone_build
{
  $MAKE all-gcc           -C "$GCC_BIN"
  $MAKE all-target-libgcc -C "$GCC_BIN"
}

function gcc_standalone_install
{
  $MAKE -C "$GCC_BIN" install-gcc
}

function gcc_build
{
  $MAKE all -C "$GCC_BIN"
}

function gcc_install
{
  $MAKE install -C "$GCC_BIN"
}

#------------------------------------------------------------------------------
# GDC
#------------------------------------------------------------------------------
function gdc_download
{
  rm -rf src/gdc
  git clone https://github.com/D-Programming-GDC/GDC.git src/gdc
  pushd src/gdc
  git checkout origin/gdc-5
  popd
}

function gdc_apply
{
  pushd src/gdc
  ./setup-gcc.sh ../gcc
  popd
}

#------------------------------------------------------------------------------

main "$@"

